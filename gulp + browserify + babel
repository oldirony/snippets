var gulp = require('gulp');
var source = require('vinyl-source-stream');
var browserify = require('browserify');
var watchify = require('watchify');
var babelify = require('babelify');
var notifier = require('node-notifier');
var concat = require('gulp-concat');
var sass = require('gulp-sass');
var watch = require('gulp-watch');

var paths = {
    theme : './',
    js : this.theme + '',
    sass : this.theme + '',
    dist : this.theme + ''
};

var notify = function(error) {
    var message = 'In: ';
    var title = 'Error: ';

    if(error.description) {
        title += error.description;
    } else if (error.message) {
        title += error.message;
    }

    if(error.filename) {
        var file = error.filename.split('/');
        message += file[file.length-1];
    }

    if(error.lineNumber) {
        message += '\nOn Line: ' + error.lineNumber;
    }

    notifier.notify({title: title, message: message});
};

var bundler = watchify(browserify({
    entries: ['./webroot/themes/email-docs/js/main.js'],
    extensions: ['.js'],
    debug: true,
    cache: {},
    packageCache: {},
    fullPaths: true
})).transform(babelify, {presets: ["es2015"]});

function bundle() {
    return bundler
        .bundle()
        .on('error', notify)
        .pipe(source('main.js'))
        .pipe(gulp.dest(path.dist))
}
bundler.on('update', bundle);

gulp.task('build', function() {
    bundle()
});

gulp.task('sass', function () {
    gulp.src(path.sass + '**/*.scss')
        .pipe(sass().on('error', sass.logError))
        .pipe(concat('style.css'))
        .pipe(gulp.dest('./'));
});

gulp.task('default', ['build', 'sass', 'watch']);

gulp.task('watch', function () {
    gulp.watch(path.sass + '**/*.scss', ['sass']);
    gulp.watch(path.js + '**/*.js', ['build']);
});
